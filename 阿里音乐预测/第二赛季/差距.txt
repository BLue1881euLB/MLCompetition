(s4$V1,s4$V2-s5$V2,s4$V2-s6$V2,s4$V2-s7$V2)
                                  V1    V2     V3     V4
1   031460402eed3e9154f8672935602e32 -1224  -3238     55
2   05f476c6f043a73f83f3e4dd3003246a  -292  -2850    322
3   0693f5e1c570d9678523c41e03aae3ab  -465  -3208    160
4   088ff4b427effea392d3fd9bb94be25c   189  -5800  -2585
5   0a5d7c11c11c717e65cc0b4edf910a5e  -478  -3477   -430
6   0c80008b0a28d356026f4b1097041689  -545  -4570   -703
7   140ef1f57652ab448b0a6ed1e00424a4  2666    866   4386
8   151e09cf1ad8a25dca66fe3567edf64f  -544  -4856  -1474
9   16b019a46905ac9bbb371c924da1d4e5    54  -2518    790
10  1731019fbaa825714d5f8e61ad1bb7ff -1725  -3260    147
11  1b322374de83520bf45aa8928e18e70a -9922 194606 198619
12  1cf3afb3ce8c04e90278f00a2daa77bd    87  -3287     16
13  23ac03280e5e1f495f33a4a60ae630e7  -312  -3178     66
14  28e32be6ba67e0c6fdfdff80ce07dfd4  -319  -5445  -2206
15  2dc8d3a917b12e65d4695e2277dd4943  4588    780   2823
16  300dde62b988fc83eb6dba1b702e9af3  1915   3077   6695
17  327c09c94e00a6b2d5f9e734011e3fa8  -590  -3503   -201
18  40bbb0da5570702dd6ff3af5e9e3aea6  -794  -3283   -246
19  41d198e20e049d2804fad4958be7f837  -564  -6403  -3004
20  4702c993fa84b8f8db22f2aeda58f1aa -1641  -3178     51
21  4acf09fb6a44f995ba0c48d053599074   499  -3214   -171
22  4ccb68d9020f30838777c286d20acaf9  -715  -3422   -374
23  509735a54607273699d6fb9496daccf4  2400  -3299    -60
24  511b64548a053b065a29732720a28c50  1232  -1867   1847
25  5540d2c258d7da1fa83a2a59846748ef  6203  -4039   -825
26  556344201e773e42247aa7aadbf837f3   637  -3427     -1
27  5742317c8b042abc4a73b5cc4e119ca2  -269  -5575  -2289
28  586fc93567498123193e02f3335b8876  -567  -3396    -77
29  5dbd0882d237a4830436a7f7986e59ab   182  -3251    126
30  5ec6519c4970a1e541ded1bd1e42c9db   249  -2876    568
31  61ae4002b325cff04846b1734f2ac4cf  1095  -3626   -364
32  632c141767f028617fe9ada43f12b2d6  -418  -2654    478
33  6bb4c3bbdb6f5a96d643320c6b6005f5   964  -3648   -386
34  6bd5ba4ea00af0509268f8842ce7bb04  -133  -3656   -428
35  6cbcdd32720882c077604065a09fb505 -1591  -3277     69
36  6dd99b36c17d7056893c52b9454baaa9   -19  -2786    610
37  74a6e454aef98c4ef64ea8a0f774d4dc  -456  -1942   1247
38  75808a38c82695330edc632d562a0238    37  -2972    302
39  75c1a6a0b360df9c9f34cad7090ed8ea   215  -2659    748
40  78b775ea3d045cd5483bfc3681ee686b -1296  -3752   -291
41  8293df4b8ee605647107e3a32f759b98  -745  -3346     14
42  8672d66a3e2b8a37d2bbcd376fe1f72c  -774  -7459  -4638
43  8adfd6e966efca488c8fd405ce46fd6a  -807  -3138     45
44  8ce69d477ff6f1f7242ba0e941a53508   197  -3103    199
45  8ec7241bcb0d518d37b8ae475d23c443  -554  -2990    152
46  9164f49f07157c2528ef4de920b9fb05    70  -3027    413
47  920b79c2b63b6a21c288d2cbe4c2afd7 -1050  -3154    103
48  924aae262d158a554ebcc6766f7ee848  3621  -5054  -2493
49  97fd17d25cddbe4f97a826c84157a4d7  7541  -4402  -1268
50  993cdf7a6b9ad8ab9b353b7115c0b588    35  -4939   -923
51  9bc1528c1e692d918f6f323907f8ed7a  3451  -3669   -491
52  9dd28b5db99c083f8ef7696a407160d8  -804  -3148    138
53  9ff7ca7b2c9e53902ac956da5cb5bcda   466  -2772    267
54  a357f276a0c5ac1fe1bbf83b874a8011  1126  -2141   1048
55  a4caaf759968695bad348a85fcdb776b   529  -6401  -2417
56  a507ecc6efacca68b8c275c7becbf5fb  1063  -4167   -777
57  a5eada19f77ccc52667238ca96480e21  2651  -3293    -22
58  a5f204fcb25900a014a2891aa2bd3208  -489  -3403    136
59  a86b4b665ddee31e3ceb691443171b0e  -304  -3377     38
60  a9bac1f3f8265955bbf60516d82df902   194  -3263    198
61  ac0c76147cee40c5448c4be38837aafe  -634  -3100    110
62  aca942091b2d0e85a13aa9b92fb0f3f2   280  -7939  -5106
63  ae8df12867f92c26dd1d9a89f051a89b -1976  -5128  -2197
64  af2e787593d1e886b345a9ccd0ee140d  -946  -3477   -121
65  af441e1a0db3a7a13e2a054bd382e6a1  -567  -3387      0
66  b26955262273f5cc9a276f792e51efe0   506  -2545    624
67  b56689f01bc9febd785aba53ac37a14f  2865  -1816   1898
68  b639dd1d3483485f61ccce1b6d6f25a6   361  -3218   -215
69  b9bd1d5269b65c6ff9930fad19049e51  -563  -3166    228
70  bbbdba3c5c4380d2d51ac0de6e17446c  -145  -3129    428
71  c2f123f8b8626e479859d62c12ff882f  -554  -3478    -52
72  c4a0637eef506f2a50748b493bdd28cc   252  -3375   -263
73  c5f0170f87a2fbb17bf65dc858c745e2  9317  -3629   -337
74  c5f9eb99b4e324d2f1cd4a67d243ba40 -1070  -3477     83
75  c7425ea3ecbea3a51b5550c698be7e71 -1874  -4450   -953
76  c8a84fd095cc7934b6b055d2e47163d1  1909    450   3948
77  cb2fed62858e767c9d6b9bf36d5b9bc5  -612  -3264    151
78  cf91fed0d572cb1a1a541b3e88905930   313  -1963   1238
79  d1383958e0c89e6195d57cf92e70a9a0 10589  -6780  -3328
80  d6478334a1a83e6a1f7f6670c80ffd64  -118  -4478   -429
81  d6583ed54536fecf80dcc3b020a42ebc   449  -5027  -1336
82  d69b0cfe8844b969529787a82ef5f88a   436  -3281    271
83  d773376e46311393cd89994bf9a93043  -169  -1797   1392
84  d9414040251205b07b4d45265fbd5285  -556  -3259    156
85  e10beef1d9f48e376dbd1bcc0f3aea83  -112  -2671    687
86  e29fe6110e9f952f0a40a9a61561b7fc  -385  -3250    -33
87  e477b34f1f81eb1c98ab5a22b37a4758  -599  -3251    -68
88  e75a089cf326a5c7fb53c1f7ecaf8c62  -837  -2990    284
89  e7912240b9fb5bb5f560a8855f626789  3579  -6686  -4306
90  eb16d303ae8a16c2e4a25ea70e12b105   839  -1670   1619
91  ef23e0c3a6916bbc9cf202edd1c40c7d  -743  -3130    113
92  efbbfd2611307e97bd36298b2fce2a02  4298   1108   4628
93  f0bbf326690a4fdaf9a5f9c77e95cfac -1012  -3471    -45
94  f1ef9cb117031f1d044200caf60d0fef  1361  -5091  -1711
95  f23873773a10b516076e72cf3f51f1d3 -1085  -2898    260
96  f36a04f7afdb3a6feefed1c738bc4743  -619  -3169    -24
97  f482df6fc477306b27261a092b10da2f    62  -4968  -1936
98  f679818dabcfb1722fa231ba4ba072e6  -309  -3206     56
99  f67f8584e121c09bc6f514ed02b876df  -453  -3154   -259
100 f89b0df2ed308d68bc3953cc073858f0  -759  -3167    285
This is a document with tianchi and shujia faq

Q1:怎么生成测试数据时间序列?

代码如下:

-- 拿到原始数据中后两个月的ds
drop table if exists test_dates_0;
create table test_dates_0 as select distinct(ds) from odps_tc_257100_f673506e024.mars_tianchi_user_actions where ds >20150701 and ds <=20150831;
select * from test_dates_0 limit 20;

-- 从bigint转为datetime
drop table if exists test_dates_1;
create table test_dates_1 as select to_date(ds,"yyyymmdd") as ds  from test_dates_0;

select * from test_dates_1 limit 20;

-- 增加60天
drop table if exists test_dates_2;
create table test_dates_2 as select dateadd(ds,61,"dd")  as ds from test_dates_1;

select min(ds), max(ds) from test_dates_2;

-- ds 转成字符串
create table test_dates_3 as select cast(ds as string) as ds from test_dates_2;
select * from test_dates_3 limit 20;


-- 删除time部分
drop table if exists test_dates_4;
create table test_dates_4 as select concat(substr(substr(ds,1,10 ),1,4),substr(substr(ds,1,10 ),6,2),substr(substr(ds,1,10 ),9,2))as ds from test_dates_3;
select * from test_dates_4 limit 20;

create table test_dates_final as select ds, 'a' as join_flag from test_dates_4;
select * from test_dates_final limit 20;

-- train data ds
create table train_dates_final as select distinct(ds), 'a' as join_flag from odps_tc_257100_f673506e024.mars_tianchi_user_actions;
select count(*) from train_dates_final limit 20;

create table all_dates_final as select * from
(
select * from train_dates_final
union all
select * from test_dates_final
) tmp;
select count(*) from all_dates_final limit 20;

--添加日期信息
create table all_dates_features_final as select 
ds, 
weekday(to_date(ds,"yyyymmdd")) as day_of_week, 
weekofyear(to_date(ds,"yyyymmdd")) as week_of_year,
substr(ds,5,2)  as month,
substr(ds,7,2)  as day,
join_flag
from all_dates_final;
Q2:规则是什么？

规则是用简单的、不精确、自己总结出来的的方法做预测。比如音乐流行趋势预测中，把七、八月的播放量作为九、十月播放量的预测，又或者是把七八月的均值，作为九、十月的预测。

Q3:wm_concat的使用

a   b   1
a   b   2
a   b   3
c   d   4
c   d   5
c   d   6

变为
a   b   1   2   3
c   d   4   5   6

groupby + wm_concat 然后拆分字段(注意长度是否一致)
Q4:随机森林报错too many class

分析,可能把播放次数当做类别,random forest 应该无法支持那么多class数,另外天池音乐推荐应该是回归问题,不是分类问题.

Q5:数加怎么做pivot?原生Hive里面能够直接引用udf

Q6:最终播放次数有.0如何解决?

ceil 或者 cast(fieldname as int )

Q7:回归函数评估函数貌似不可用?

是的, 如果只是简单的RMSE or RMAE 自己写个sql就好了,下面是我写的部分,之后看看那个比赛的评估指标是否能用sql完成:

drop table if exists eval;
create table eval as select abs(plays_cnt - prediction_score) as x1, pow(plays_cnt - prediction_score, 2) as x2 from result_lr_2;
select sum(x1)/6000 as RAME, sum(x2)/600 as RSME from eval;
Q8:Xgboost很奇怪,无法调节num_rounds,且最后预测结果每个artist_id每天的播放次数都一样?

xgboost 回归模块貌似无法更改num_rounds,且播放次数都一样,我这里没有找到为啥,可能是数据的问题?在LR当中最终的预测比较正确.